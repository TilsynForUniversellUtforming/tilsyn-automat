@page
@using System.Security.Claims
@using Difi.Sjalvdeklaration.Shared.Classes.Declaration.Data
@using Difi.Sjalvdeklaration.Shared.Enum
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor

@model Difi.Sjalvdeklaration.wwwroot.Pages.Declaration.DeclarationFormModel

@{
    ViewData["Title"] = Model.DeclarationItemForm?.Name;
    var mainIndex = 1;

    var backUrl = "";

    if (Model.DeclarationItemForm?.Status.Id == (int)DeclarationStatus.Sent || Model.DeclarationItemForm?.Status.Id == (int)DeclarationStatus.Created)
    {
        backUrl = "/Declaration/DeclarationStart?id=" + Model.DeclarationItemForm.Id;
    }

    if (Model.DeclarationItemForm?.Status.Id == (int)DeclarationStatus.Started || Model.DeclarationItemForm?.Status.Id == (int)DeclarationStatus.Return)
    {
        backUrl = "/Declaration/DeclarationList";
    }

    var userId = Guid.Empty;
    var claims = HttpContextAccessor.HttpContext?.User?.Claims.FirstOrDefault(x => x.Type == ClaimTypes.PrimarySid);

    if (claims != null)
    {
        userId = Guid.Parse(claims.Value);
    }
}

@if (Model.DeclarationItemForm != null)
{
    @Html.DisplayFor(x => x.DeclarationItemForm, "DeclarationStatus", new { backUrl })

    <main>
        <form method="post" id="DeclarationForm" data-id="@Model.DeclarationItemForm.Id" data-userid="@userId">
            <div class="row">
                <div class="xlarge-12 large-10 small-12 large-centered xlarge-uncentered columns">

                    <button class="hide" id="ButtonAutoSave">AutoSave</button>

                    <div class="info-wrapper">
                        <div class="row">
                            <div class="small-12 columns">
                                <h2>@Localizer["Good to know"]</h2>
                            </div>
                            <div class="small-2 medium-1 text-center columns">
                                <img alt="" role="presentation" src="/images/kamera.png"><br />
                                <img alt="" role="presentation" src="/images/mata.png">
                            </div>
                            <div class="small-10 medium-8 end columns">
                                @Localizer["It takes about 15 minutes and your answers will be saved automatically. You need tape measure or thumb and camera."]
                            </div>
                            <br>
                        </div>
                    </div>

                    <br />

                    <div class="jsToggleCardContainer">
                        <div class="row medium-uncollapse">
                            <div class="small-12 medium-12 columns">
                                <h2 class="h2-toggle"><button class="toogle-header-button jsToggleCardButton"><span class="toggle-header-number">@mainIndex</span> @Localizer["Machine"] <span class="toggle-header-icon hide-for-print"><span class="show-for-sr">@Localizer["Show/Hide"] @Localizer["Machine"]</span></span> </button></h2>
                            </div>
                        </div>

                        <div class="row">
                            <div class="small-12 medium-12 columns">
                                <div class="jsToggleCardTarget">
                                    <div class="card jsCard">
                                        @Html.EditorFor(x => x.DeclarationItemForm.DeclarationTestItem.SupplierAndVersionId, "AnswerDropdownListInt", new { list = Model.SelectSupplierAndVersionList, id = "answer_int_supplierandversion", firstQuestion = true, orderText = "1.1", value = Model.DeclarationItemForm.DeclarationTestItem.SupplierAndVersionId })

                                        <div id="jsSupplierAndVersionOther">
                                            @Html.EditorFor(x => x.DeclarationItemForm.DeclarationTestItem.SupplierAndVersionOther, "AnswerString", new { id = "answer_string_testitem_supplierandversionother", firstQuestion = false, orderText = "1.1", value = Model.DeclarationItemForm.DeclarationTestItem.SupplierAndVersionOther, what = "input" })
                                        </div>
                                    </div>

                                    <div class="card jsCard">
                                        @Html.EditorFor(x => x.DeclarationItemForm.DeclarationTestItem.DescriptionInText, "AnswerString", new { id = "answer_string_testitem_descriptionintext", firstQuestion = true, orderText = "1.2", value = Model.DeclarationItemForm.DeclarationTestItem.DescriptionInText, what = "textarea" })
                                    </div>

                                    <div class="card jsCard">
                                        @Html.EditorFor(x => x.DeclarationItemForm.DeclarationTestItem.Image1, "AnswerImage", new { id = "answer_image_testitem_image1", firstQuestion = true, orderText = "1.3", value = "" })
                                    </div>

                                    <div class="card jsCard">
                                        @Html.EditorFor(x => x.DeclarationItemForm.DeclarationTestItem.Image2, "AnswerImage", new { id = "answer_image_testitem_image2", firstQuestion = true, orderText = "1.4", value = "" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @foreach (var declarationIndicatorGroup in Model.TestGroupItemList)
                    {
                        var subIndex = 0;
                        mainIndex++;

                        var indicatorList = Model.DeclarationItemForm.IndicatorList.Where(x => x.TestGroupItemId == declarationIndicatorGroup.Id);

                        <div class="jsToggleCardContainer">
                            <div class="row medium-uncollapse">
                                <div class="small-12 medium-12 columns">
                                    <h2 class="h2-toggle"><button data-id="@declarationIndicatorGroup.Id" class="toogle-header-button jsToggleCardButton"><span class="toggle-header-number">@mainIndex</span> @declarationIndicatorGroup.Language.Name <span class="toggle-header-icon hide-for-print"><span class="show-for-sr">@Localizer["Show/Hide"] @declarationIndicatorGroup.Language.Name</span></span> </button></h2>
                                </div>
                            </div>

                            <div class="row">
                                <div class="small-12 medium-12 columns">
                                    <div class="jsToggleCardTarget" data-id="@declarationIndicatorGroup.Id">

                                        @foreach (var item in indicatorList)
                                        {
                                            var indicatorItem = item.IndicatorItem;
                                            var outcomeData = indicatorItem.OutcomeData;


                                            foreach (var ruleItem in indicatorItem.RuleList.OrderBy(x => x.Order))
                                            {
                                                RuleData ruleData = null;

                                                if (outcomeData != null)
                                                {
                                                    ruleData = outcomeData.RuleDataList.SingleOrDefault(x => x.RuleItemId == ruleItem.Id);
                                                }

                                                var firstQuestion = true;
                                                subIndex++;

                                                <div class="card jsCard">
                                                    <div class="jsRuleItem" id="@ruleItem.Id">
                                                        @foreach (var answerItem in ruleItem.AnswerList.OrderBy(x => x.Order))
                                                        {
                                                            AnswerData answerData = null;

                                                            if (ruleData != null)
                                                            {
                                                                answerData = ruleData.AnswerDataList.SingleOrDefault(x => x.AnswerItemId == answerItem.Id);
                                                            }

                                                            var hide = (answerItem.LinkedParentFailedId != Guid.Empty || answerItem.LinkedParentCorrectId != Guid.Empty) && !answerItem.AlwaysVisible;

                                                            var formId = indicatorItem.Id + "_" + ruleItem.Id + "_" + answerItem.Id;
                                                            var orderText = mainIndex + "." + subIndex;

                                                            <div class="jsAnswerItem" data-hide="@hide" data-type="@answerItem.TypeOfAnswer.Text" data-id="@answerItem.Id" data-bool="@answerItem.Bool" data-AlwaysVisible="@answerItem.AlwaysVisible" data-min="@answerItem.MinInt" data-max="@answerItem.MaxInt" data-LinkedParentFailedId="@answerItem.LinkedParentFailedId" data-LinkedParentCorrectId="@answerItem.LinkedParentCorrectId">
                                                                @if (answerItem.TypeOfAnswer.Id == (int)TypeOfAnswer.String)
                                                                {
                                                                    @Html.EditorFor(x => answerItem.String, "AnswerString", new { text = answerItem.Language.Question, id = "answer_string_" + formId, firstQuestion, orderText, value = answerData?.String, ruleItem, what = "textarea" })
                                                                }

                                                                @if (answerItem.TypeOfAnswer.Id == (int)TypeOfAnswer.Bool)
                                                                {
                                                                    if (answerData != null)
                                                                    {
                                                                        @Html.EditorFor(x => answerItem.Bool, "AnswerBool", new { text = answerItem.Language.Question, id = "answer_bool_" + formId, firstQuestion, orderText, value = answerData.Bool, trueText = answerItem.Language.BoolTrueText, falseText = answerItem.Language.BoolFalseText, ruleItem })
                                                                    }
                                                                    else
                                                                    {
                                                                        @Html.EditorFor(x => answerItem.Bool, "AnswerBool", new { text = answerItem.Language.Question, id = "answer_bool_" + formId, firstQuestion, orderText, trueText = answerItem.Language.BoolTrueText, falseText = answerItem.Language.BoolFalseText, ruleItem })
                                                                    }
                                                                }

                                                                @if (answerItem.TypeOfAnswer.Id == (int)TypeOfAnswer.Int)
                                                                {
                                                                    @Html.EditorFor(x => answerItem.MinInt, "AnswerInt", new { text = answerItem.Language.Question, id = "answer_int_" + formId, firstQuestion, orderText, value = answerData?.Int, ruleItem })
                                                                }

                                                                @if (answerItem.TypeOfAnswer.Id == (int)TypeOfAnswer.Image)
                                                                {
                                                                    if (answerData != null)
                                                                    {
                                                                        @Html.EditorFor(x => answerData.Image, "AnswerImage", new { text = answerItem.Language.Question, id = "answer_image_" + formId, firstQuestion, orderText, ruleItem })
                                                                    }
                                                                    else
                                                                    {
                                                                        @Html.EditorFor(x => answerItem.Image, "AnswerImage", new { text = answerItem.Language.Question, id = "answer_image_" + formId, firstQuestion, orderText, ruleItem })
                                                                    }

                                                                }
                                                            </div>

                                                            firstQuestion = false;
                                                        }
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <hr><br />

            <div class="row">
                <div class="xlarge-12 large-10 small-12 large-centered xlarge-uncentered columns">
                    <button class="button large" type="submit" asp-page-handler="SendIn" asp-route-id="@Model.DeclarationItemForm.Id">@Localizer["Next step"]</button>
                    <br />
                    @*<p><br />
                            @Localizer["Your answers will be saved automatically. You can at any time see a summary by moving on."]
                        </p>*@
                </div>
            </div>
            <br /><br />
        </form>
    </main>
}

@section Scripts {
    <script>
        var storageAccountName = '@(Model.StorageAccountName)';
        var storageContainer = '@(Model.StorageContainer)';
    </script>

    <script src="~/js/declarationForm.js"></script>
    <link href="/js/azure.fine-uploader/fine-uploader-gallery.css" rel="stylesheet">
    <link href="/js/azure.fine-uploader/fine-uploader-gallery.min.css" rel="stylesheet">
    <script src="/js/azure.fine-uploader/azure.fine-uploader.js"></script>

    <script type="text/template" id="qq-template">
        <div class="qq-uploader-selector qq-uploader" qq-drop-area-text="Drop files here">
            <div class="qq-total-progress-bar-container-selector qq-total-progress-bar-container">
                <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-total-progress-bar-selector qq-progress-bar qq-total-progress-bar"></div>
            </div>
            <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>
                <span class="qq-upload-drop-area-text-selector"></span>
            </div>
            <ul class="listing qq-upload-list-selector qq-upload-list" aria-live="polite" aria-relevant="additions removals">
                <li>
                    <div class="qq-progress-bar-container-selector">
                        <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-progress-bar-selector qq-progress-bar"></div>
                    </div>
                    <span class="qq-upload-spinner-selector qq-upload-spinner"></span>
                    <img class="qq-thumbnail-selector" qq-max-size="100" qq-server-scale>

                    <button class="link-button qq-btn qq-upload-delete-selector qq-upload-delete">@Localizer["Remove image"]</button>
                </li>
            </ul>
            <div class="qq-upload-button-selector qq-upload-button">
                <div class="row ">
                    <div class="small-10 small-centered medium-12 columns">
                        <button tabindex="-1" class="button upload-photo"><span></span>@Localizer["Add image"]</button>
                    </div>
                </div>
            </div>
        </div>
    </script>

    @{ await Html.RenderPartialAsync("Shared/_ValidationScriptsPartial");}
}
