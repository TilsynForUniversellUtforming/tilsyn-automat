@using Difi.Sjalvdeklaration.Shared.Classes.Declaration
@using Difi.Sjalvdeklaration.Shared.Classes.Declaration.Data
@using Difi.Sjalvdeklaration.Shared.Enum
@model Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.TestGroupItem

@{
    var mainIndex = ViewData["mainIndex"];
    var viewResult = (bool)ViewData["viewResult"];
    var declarationItem = (DeclarationItem)ViewData["DeclarationItem"];
    var subIndex = 0;
}

<div class="jsToggleCardContainer info-messages">
    <div class="row medium-uncollapse">
        <div class="small-12 medium-12 columns">
            <h2 class="h2-toggle">
                <button data-id="@Model.Id" class="toogle-header-button isDone-@Model.AllDone jsToggleCardButton">
                    <span class="toggle-header-number">@mainIndex</span> @Model.Language.Name <span class="header-status-icon isDone-@Model.AllDone hide-for-print"></span>
                </button>
            </h2>
        </div>
    </div>

    <div class="row">
        <div class="small-12 medium-11 medium-centered columns">
            <div class="jsToggleCardTarget" data-id="@Model.Id">
                @{
                    var indicatorList = declarationItem.IndicatorList.Where(x => x.TestGroupItemId == Model.Id);
                }

                @foreach (var item in indicatorList)
                {
                    var indicatorItem = item.IndicatorItem;
                    var outcomeData = indicatorItem.OutcomeData;

                    if (outcomeData != null)
                    {
                        foreach (var ruleItem in indicatorItem.RuleList.OrderBy(x => x.Order))
                        {
                            var ruleData = outcomeData.RuleDataList.SingleOrDefault(x => x.RuleItemId == ruleItem.Id);

                            if (ruleData != null)
                            {
                                var lastAnswerData = new AnswerData
                                {
                                    Id = Guid.Empty,
                                    ResultId = -1,
                                };

                                subIndex++;

                                <div class="card transparent">
                                    <div class="jsRuleItem" id="@ruleItem.Id">
                                        @foreach (var answerItem in ruleItem.AnswerList.OrderBy(x => x.Order))
                                        {
                                            var answerData = ruleData.AnswerDataList.SingleOrDefault(x => x.AnswerItemId == answerItem.Id);
                                            var viewAnswerItem = true;

                                            if (lastAnswerData != null && answerItem != null)
                                            {
                                                if (lastAnswerData.ResultId == (int)TypeOfResult.Ok && answerItem.LinkedParentFailedId != Guid.Empty)
                                                {
                                                    if (answerData.ResultId == (int)TypeOfResult.NotTestable)
                                                    {
                                                        viewAnswerItem = false;
                                                    }
                                                }

                                                if (lastAnswerData.ResultId == (int)TypeOfResult.NotTestable && answerItem.LinkedParentFailedId != Guid.Empty)
                                                {
                                                    if (answerData.ResultId == (int)TypeOfResult.NotTestable)
                                                    {
                                                        viewAnswerItem = false;
                                                    }
                                                }

                                                if (lastAnswerData.ResultId == (int)TypeOfResult.Ok && answerItem.LinkedParentFailedId != Guid.Empty)
                                                {
                                                    if (answerData.ResultId == (int)TypeOfResult.NotTested)
                                                    {
                                                        viewAnswerItem = false;
                                                    }
                                                }

                                                if (lastAnswerData.ResultId == (int)TypeOfResult.NotTested && answerItem.LinkedParentFailedId != Guid.Empty)
                                                {
                                                    viewAnswerItem = false;
                                                }

                                                if (lastAnswerData.ResultId == (int)TypeOfResult.NotTested && answerItem.LinkedParentCorrectId != Guid.Empty)
                                                {
                                                    viewAnswerItem = false;
                                                }
                                            }

                                            var orderText = mainIndex + "." + subIndex;

                                            if (viewAnswerItem)
                                            {

                                                if (answerItem.TypeOfAnswer.Id == (int)TypeOfAnswer.String)
                                                {
                                                    @Html.DisplayFor(x => answerData.String, "AnswerString", new { text = answerItem.Language.Question, orderText, result = answerData.Result, viewResult })
                                                }

                                                if (answerItem.TypeOfAnswer.Id == (int)TypeOfAnswer.Bool)
                                                {
                                                    @Html.DisplayFor(x => answerData.Bool, "AnswerBool", new { text = answerItem.Language.Question, orderText, result = answerData.Result, trueText = answerItem.Language.BoolTrueText, falseText = answerItem.Language.BoolFalseText, viewResult = viewResult })
                                                }

                                                if (answerItem.TypeOfAnswer.Id == (int)TypeOfAnswer.Int)
                                                {
                                                    @Html.DisplayFor(x => answerData.Int, "AnswerInt", new { text = answerItem.Language.Question, orderText, result = answerData.Result, viewResult })
                                                }

                                                if (answerItem.TypeOfAnswer.Id == (int)TypeOfAnswer.Image)
                                                {
                                                    @Html.DisplayFor(x => answerData.Image, "AnswerImage", new { text = answerItem.Language.Question, orderText, result = answerData.Result, viewResult })
                                                }
                                            }

                                            lastAnswerData = answerData;
                                        }
                                    </div>
                                </div>

                                if (viewResult)
                                {
                                    <div class="info-message">
                                        @if (outcomeData.IndicatorOutcomeItem != null)
                                        {
                                            <span>Utfall: @outcomeData.Result.Text<br /></span>
                                            <span>Formulering på utfall: @outcomeData.IndicatorOutcomeItem.Language.OutcomeText<br /></span>
                                        }

                                        <span>@ruleData.Rule.Requirement.Language.Description<br /></span>
                                        <span>Kapittel: @ruleData.Rule.Chapter.ChapterNumber @ruleData.Rule.Chapter.ChapterHeading<br /></span>
                                        <span>Standard: @outcomeData.RuleDataList.First().Rule.Chapter.Standard.Standard<br /></span>
                                    </div>
                                }
                            }
                        }
                    }
                }
            </div>
        </div>
    </div>
</div>