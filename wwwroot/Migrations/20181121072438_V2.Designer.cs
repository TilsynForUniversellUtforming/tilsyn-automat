// <auto-generated />
using System;
using Difi.Sjalvdeklaration.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Difi.Sjalvdeklaration.wwwroot.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181121072438_V2")]
    partial class V2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Company.CompanyItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BusinessAddressCity");

                    b.Property<string>("BusinessAddressStreet");

                    b.Property<string>("BusinessAddressZip");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("CorporateIdentityNumber")
                        .IsRequired();

                    b.Property<string>("CustomAddressCity");

                    b.Property<string>("CustomAddressStreet");

                    b.Property<string>("CustomAddressZip");

                    b.Property<string>("CustomName");

                    b.Property<string>("ExternalId");

                    b.Property<string>("IndustryGroupAggregated");

                    b.Property<string>("IndustryGroupCode");

                    b.Property<string>("IndustryGroupDescription");

                    b.Property<string>("InstitutionalSectorCode");

                    b.Property<string>("InstitutionalSectorDescription");

                    b.Property<string>("LocationAddressCity");

                    b.Property<string>("LocationAddressStreet");

                    b.Property<string>("LocationAddressZip");

                    b.Property<string>("MailingAddressCity");

                    b.Property<string>("MailingAddressStreet");

                    b.Property<string>("MailingAddressZip");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("OwenerCorporateIdentityNumber");

                    b.HasKey("Id");

                    b.ToTable("CompanyList");
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Company.ContactPersonItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanyItemId");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("PhoneCountryCode");

                    b.HasKey("Id");

                    b.HasIndex("CompanyItemId");

                    b.ToTable("ContactPersonList");
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Data.AnswerData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AnswerItemId");

                    b.Property<bool>("Bool");

                    b.Property<Guid?>("ImageId");

                    b.Property<int>("Int");

                    b.Property<int>("ResultId");

                    b.Property<Guid>("RuleDataId");

                    b.Property<string>("String");

                    b.Property<int>("TypeOfAnswerId");

                    b.HasKey("Id");

                    b.HasIndex("AnswerItemId");

                    b.HasIndex("ImageId");

                    b.HasIndex("ResultId");

                    b.HasIndex("RuleDataId");

                    b.HasIndex("TypeOfAnswerId");

                    b.ToTable("AnswerData");
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Data.OutcomeData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DeclarationTestItemId");

                    b.Property<Guid>("IndicatorItemId");

                    b.Property<Guid>("RequirementItemId");

                    b.Property<int>("ResultId");

                    b.Property<string>("ResultText");

                    b.HasKey("Id");

                    b.HasIndex("DeclarationTestItemId");

                    b.HasIndex("IndicatorItemId");

                    b.HasIndex("RequirementItemId");

                    b.HasIndex("ResultId");

                    b.ToTable("OutcomeData");
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Data.RuleData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("OutcomeDataId");

                    b.Property<int>("ResultId");

                    b.Property<Guid>("RuleItemId");

                    b.HasKey("Id");

                    b.HasIndex("OutcomeDataId");

                    b.HasIndex("ResultId");

                    b.HasIndex("RuleItemId");

                    b.ToTable("RuleData");
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.DeclarationItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanyItemId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("DeadlineDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("SentInDate");

                    b.Property<int>("Status");

                    b.Property<Guid>("UserItemId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyItemId");

                    b.HasIndex("UserItemId");

                    b.ToTable("DeclarationList");
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.DeclarationTestItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CaseNumber");

                    b.Property<Guid>("DeclarationItemId");

                    b.Property<string>("DescriptionInText");

                    b.Property<int?>("FinishedStatusId");

                    b.Property<Guid?>("Image1Id");

                    b.Property<Guid?>("Image2Id");

                    b.Property<int?>("SupplierAndVersionId");

                    b.Property<string>("SupplierAndVersionOther");

                    b.Property<int?>("TypeOfMachineId");

                    b.Property<int?>("TypeOfTestId");

                    b.HasKey("Id");

                    b.HasIndex("DeclarationItemId")
                        .IsUnique();

                    b.HasIndex("FinishedStatusId");

                    b.HasIndex("Image1Id");

                    b.HasIndex("Image2Id");

                    b.HasIndex("SupplierAndVersionId");

                    b.HasIndex("TypeOfMachineId");

                    b.HasIndex("TypeOfTestId");

                    b.ToTable("DeclarationTestItem");
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.AnswerItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Bool");

                    b.Property<int>("MaxInt");

                    b.Property<int>("MinInt");

                    b.Property<int>("Order");

                    b.Property<string>("Question");

                    b.Property<Guid>("RuleItemId");

                    b.Property<int>("TypeOfAnswerId");

                    b.Property<Guid>("ViewIfOtherFaildId");

                    b.Property<bool>("ViewIfOtherFailed");

                    b.HasKey("Id");

                    b.HasIndex("RuleItemId");

                    b.HasIndex("TypeOfAnswerId");

                    b.ToTable("AnswerList");

                    b.HasData(
                        new { Id = new Guid("02d2db89-3717-48e1-883e-8e526bf6c727"), Bool = false, MaxInt = 0, MinInt = 0, Order = 1, Question = "Finnes det hindringer i kundens betjeningsområde?", RuleItemId = new Guid("eb160c6c-3a9e-4dff-93df-577d9eab4e09"), TypeOfAnswerId = 2, ViewIfOtherFaildId = new Guid("00000000-0000-0000-0000-000000000000"), ViewIfOtherFailed = false },
                        new { Id = new Guid("6912d4a0-b73b-4ecc-9fa8-49e1fd356635"), Bool = false, MaxInt = 0, MinInt = 0, Order = 2, Question = "Ta bilde", RuleItemId = new Guid("eb160c6c-3a9e-4dff-93df-577d9eab4e09"), TypeOfAnswerId = 4, ViewIfOtherFaildId = new Guid("00000000-0000-0000-0000-000000000000"), ViewIfOtherFailed = false },
                        new { Id = new Guid("d7b40e3c-e7fa-44e5-b44f-750759c971cc"), Bool = false, MaxInt = 0, MinInt = 0, Order = 3, Question = "Beskriv hindringene i kundens betjeningsområde.", RuleItemId = new Guid("eb160c6c-3a9e-4dff-93df-577d9eab4e09"), TypeOfAnswerId = 1, ViewIfOtherFaildId = new Guid("02d2db89-3717-48e1-883e-8e526bf6c727"), ViewIfOtherFailed = true },
                        new { Id = new Guid("a1964762-5c8f-40bb-a22d-c907149079d4"), Bool = false, MaxInt = 0, MinInt = 0, Order = 1, Question = "Henger det gjenstander over kundens betjeningsområde?", RuleItemId = new Guid("b64cac7e-6525-49e8-9112-0238e1588ed8"), TypeOfAnswerId = 2, ViewIfOtherFaildId = new Guid("00000000-0000-0000-0000-000000000000"), ViewIfOtherFailed = false },
                        new { Id = new Guid("8a12d92b-8a6a-44e7-9517-74331a4c2483"), Bool = false, MaxInt = 0, MinInt = 0, Order = 2, Question = "Ta bilde", RuleItemId = new Guid("b64cac7e-6525-49e8-9112-0238e1588ed8"), TypeOfAnswerId = 4, ViewIfOtherFaildId = new Guid("00000000-0000-0000-0000-000000000000"), ViewIfOtherFailed = false },
                        new { Id = new Guid("bf459d05-702d-47d7-a5b7-19f8b3fb67c9"), Bool = false, MaxInt = -1, MinInt = 220, Order = 3, Question = "Hvor mange cm over gulvet henger den laveste gjenstanden i kundens betjeningsområde?", RuleItemId = new Guid("b64cac7e-6525-49e8-9112-0238e1588ed8"), TypeOfAnswerId = 3, ViewIfOtherFaildId = new Guid("a1964762-5c8f-40bb-a22d-c907149079d4"), ViewIfOtherFailed = true },
                        new { Id = new Guid("202d20e0-61df-4a7c-8287-104e3b439f64"), Bool = false, MaxInt = 0, MinInt = 0, Order = 1, Question = "Står betalingsterminalen ved siden av en annen betalingsterminal, på rett linje?", RuleItemId = new Guid("0d6c763e-e0f6-4049-adeb-ae9429262b57"), TypeOfAnswerId = 2, ViewIfOtherFaildId = new Guid("00000000-0000-0000-0000-000000000000"), ViewIfOtherFailed = false },
                        new { Id = new Guid("13d6d530-e533-4510-9a66-8b862899dbdf"), Bool = false, MaxInt = 0, MinInt = 0, Order = 2, Question = "Ta bilde", RuleItemId = new Guid("0d6c763e-e0f6-4049-adeb-ae9429262b57"), TypeOfAnswerId = 4, ViewIfOtherFaildId = new Guid("00000000-0000-0000-0000-000000000000"), ViewIfOtherFailed = false },
                        new { Id = new Guid("89fd2205-1047-403d-a5bd-f70a1de2f247"), Bool = false, MaxInt = -1, MinInt = 150, Order = 3, Question = "Hvor mange cm er det mellom betalingsterminalene?", RuleItemId = new Guid("0d6c763e-e0f6-4049-adeb-ae9429262b57"), TypeOfAnswerId = 3, ViewIfOtherFaildId = new Guid("202d20e0-61df-4a7c-8287-104e3b439f64"), ViewIfOtherFailed = true },
                        new { Id = new Guid("d8611e84-0f00-4d75-bcab-cbf127fb68b5"), Bool = true, MaxInt = 0, MinInt = 0, Order = 1, Question = "Finnes det et skilt som viser hvor kunden skal betale varene sine?", RuleItemId = new Guid("832e0843-cab3-4dbc-9799-974e283fcc0b"), TypeOfAnswerId = 2, ViewIfOtherFaildId = new Guid("00000000-0000-0000-0000-000000000000"), ViewIfOtherFailed = false },
                        new { Id = new Guid("c4870935-ee11-4557-a9c3-aca678c17565"), Bool = false, MaxInt = 0, MinInt = 0, Order = 2, Question = "Ta bilde", RuleItemId = new Guid("832e0843-cab3-4dbc-9799-974e283fcc0b"), TypeOfAnswerId = 4, ViewIfOtherFaildId = new Guid("00000000-0000-0000-0000-000000000000"), ViewIfOtherFailed = false },
                        new { Id = new Guid("9a51cc68-857e-4822-ac81-0ec3ebe7bf43"), Bool = true, MaxInt = 0, MinInt = 0, Order = 3, Question = "Er skiltet plassert over området der kunden skal betale varene sine?", RuleItemId = new Guid("832e0843-cab3-4dbc-9799-974e283fcc0b"), TypeOfAnswerId = 2, ViewIfOtherFaildId = new Guid("d8611e84-0f00-4d75-bcab-cbf127fb68b5"), ViewIfOtherFailed = true },
                        new { Id = new Guid("f69c1e45-99d8-4293-a242-c5ed9e126e99"), Bool = true, MaxInt = 0, MinInt = 0, Order = 4, Question = "Er skiltet synlig på avstand utenfor kundens betjeningsområde?", RuleItemId = new Guid("832e0843-cab3-4dbc-9799-974e283fcc0b"), TypeOfAnswerId = 2, ViewIfOtherFaildId = new Guid("d8611e84-0f00-4d75-bcab-cbf127fb68b5"), ViewIfOtherFailed = true },
                        new { Id = new Guid("f98f67e5-cf6a-4afe-8998-3132640f9d70"), Bool = false, MaxInt = 130, MinInt = 75, Order = 1, Question = "Hvor mange cm er det fra gulvet og opp til betalingsterminalen?", RuleItemId = new Guid("5b3af04b-f6c6-4425-a22f-c2e7479839a5"), TypeOfAnswerId = 3, ViewIfOtherFaildId = new Guid("00000000-0000-0000-0000-000000000000"), ViewIfOtherFailed = false },
                        new { Id = new Guid("438787f3-b33b-489c-b5a8-2f046a634dea"), Bool = false, MaxInt = 0, MinInt = 0, Order = 2, Question = "Ta bilde", RuleItemId = new Guid("5b3af04b-f6c6-4425-a22f-c2e7479839a5"), TypeOfAnswerId = 4, ViewIfOtherFaildId = new Guid("00000000-0000-0000-0000-000000000000"), ViewIfOtherFailed = false }
                    );
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.DeclarationTestGroup", b =>
                {
                    b.Property<Guid>("TestGroupItemId");

                    b.Property<Guid>("DeclarationItemId");

                    b.Property<int>("Order");

                    b.HasKey("TestGroupItemId", "DeclarationItemId");

                    b.HasIndex("DeclarationItemId");

                    b.ToTable("DeclarationTestGroupList");
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.IndicatorItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastChanged");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("IndicatorList");

                    b.HasData(
                        new { Id = new Guid("692627b2-53bc-43f2-900d-44a40a21e7e9"), LastChanged = new DateTime(2018, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "1 Kundens betjeningsområde " },
                        new { Id = new Guid("6b4bf385-9174-4634-bc9e-bfbdab98586e"), LastChanged = new DateTime(2018, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "2 avstand mellom automater " },
                        new { Id = new Guid("c52eb3bc-6464-4dc9-b9f3-eb975e2a012c"), LastChanged = new DateTime(2018, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "3 Plassering av skilt" },
                        new { Id = new Guid("5b2a0a78-039f-4173-bf9e-1ca0060d1c53"), LastChanged = new DateTime(2018, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Utfall 4 Høyde på betalingsterm" }
                    );
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.IndicatorTestGroup", b =>
                {
                    b.Property<Guid>("TestGroupItemId");

                    b.Property<Guid>("IndicatorItemId");

                    b.Property<int>("Order");

                    b.HasKey("TestGroupItemId", "IndicatorItemId");

                    b.HasIndex("IndicatorItemId");

                    b.ToTable("IndicatorTestGroupList");

                    b.HasData(
                        new { TestGroupItemId = new Guid("aec1869a-30f8-403c-b909-df115173f009"), IndicatorItemId = new Guid("692627b2-53bc-43f2-900d-44a40a21e7e9"), Order = 1 },
                        new { TestGroupItemId = new Guid("aec1869a-30f8-403c-b909-df115173f009"), IndicatorItemId = new Guid("6b4bf385-9174-4634-bc9e-bfbdab98586e"), Order = 2 },
                        new { TestGroupItemId = new Guid("b6c22ac9-d775-4dfd-ac8e-b4ca565ea3fb"), IndicatorItemId = new Guid("c52eb3bc-6464-4dc9-b9f3-eb975e2a012c"), Order = 3 },
                        new { TestGroupItemId = new Guid("9aae6bc9-4b60-405c-81a7-ec142d8c1ca6"), IndicatorItemId = new Guid("5b2a0a78-039f-4173-bf9e-1ca0060d1c53"), Order = 4 }
                    );
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.IndicatorUserPrerequisite", b =>
                {
                    b.Property<Guid>("IndicatorItemId");

                    b.Property<int>("ValueListUserPrerequisiteId");

                    b.HasKey("IndicatorItemId", "ValueListUserPrerequisiteId");

                    b.HasIndex("ValueListUserPrerequisiteId");

                    b.ToTable("IndicatorUserPrerequisite");
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.RequirementItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<Guid>("IndicatorItemId");

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorItemId")
                        .IsUnique();

                    b.ToTable("RequirementList");

                    b.HasData(
                        new { Id = new Guid("875e76b5-c926-43a0-8738-c4f41c7a0b8b"), Description = "Krav 3.1 Betjeningsområdet foran betalingsterminalen skal være minst 150 x 150 centimeter. Det skal ikke være hindringer i betjeningsområdet.", IndicatorItemId = new Guid("692627b2-53bc-43f2-900d-44a40a21e7e9"), Order = 1 },
                        new { Id = new Guid("c65786bb-1b93-4153-b88c-935cc2a7ab60"), Description = "Krav 3.5 Dersom to eller flere automater står ved siden av hverandre, skal det være minst 150 centimeter fra midten av automaten til midten av neste automat.", IndicatorItemId = new Guid("6b4bf385-9174-4634-bc9e-bfbdab98586e"), Order = 2 },
                        new { Id = new Guid("aebd662d-9dd5-4a27-88d5-19d6c5e12e5a"), Description = "Krav 1.3 Skilt skal plasseres over betalingsterminalen.", IndicatorItemId = new Guid("c52eb3bc-6464-4dc9-b9f3-eb975e2a012c"), Order = 3 },
                        new { Id = new Guid("e503322b-ed77-4b69-adc4-eca19b6eb97d"), Description = "Krav 4.2: Høyden på betjeningskomponenter som skjerm og tastatur skal være mellom 75 centimeter og 130 centimeter over gulvet.", IndicatorItemId = new Guid("5b2a0a78-039f-4173-bf9e-1ca0060d1c53"), Order = 4 }
                    );
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.RequirementUserPrerequisite", b =>
                {
                    b.Property<Guid>("RequirementItemId");

                    b.Property<int>("ValueListUserPrerequisiteId");

                    b.HasKey("RequirementItemId", "ValueListUserPrerequisiteId");

                    b.HasIndex("ValueListUserPrerequisiteId");

                    b.ToTable("RequirementUserPrerequisiteList");
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.RuleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ChapterItemId");

                    b.Property<string>("HelpText");

                    b.Property<string>("Illustration");

                    b.Property<Guid?>("IndicatorItemId");

                    b.Property<int>("Order");

                    b.Property<Guid>("RequirementItemId");

                    b.Property<Guid>("StandardItemId");

                    b.Property<string>("ToolsNeed");

                    b.HasKey("Id");

                    b.HasIndex("ChapterItemId");

                    b.HasIndex("IndicatorItemId");

                    b.HasIndex("RequirementItemId");

                    b.HasIndex("StandardItemId");

                    b.ToTable("RuleList");

                    b.HasData(
                        new { Id = new Guid("eb160c6c-3a9e-4dff-93df-577d9eab4e09"), ChapterItemId = new Guid("731a0f5c-f586-471f-b32c-ceb8027f735a"), HelpText = "", Order = 4, RequirementItemId = new Guid("875e76b5-c926-43a0-8738-c4f41c7a0b8b"), StandardItemId = new Guid("7851b33f-4cec-405c-8533-53cf7a6832e2"), ToolsNeed = "Ingen" },
                        new { Id = new Guid("b64cac7e-6525-49e8-9112-0238e1588ed8"), ChapterItemId = new Guid("b80b9b15-8f0e-4702-b7d9-95cafa68f9fb"), HelpText = "", Order = 5, RequirementItemId = new Guid("875e76b5-c926-43a0-8738-c4f41c7a0b8b"), StandardItemId = new Guid("7851b33f-4cec-405c-8533-53cf7a6832e2"), ToolsNeed = "Ingen" },
                        new { Id = new Guid("0d6c763e-e0f6-4049-adeb-ae9429262b57"), ChapterItemId = new Guid("5f5abe28-1a74-4242-acc8-4b881ee4973a"), HelpText = "", Order = 1, RequirementItemId = new Guid("c65786bb-1b93-4153-b88c-935cc2a7ab60"), StandardItemId = new Guid("7851b33f-4cec-405c-8533-53cf7a6832e2"), ToolsNeed = "Ingen" },
                        new { Id = new Guid("832e0843-cab3-4dbc-9799-974e283fcc0b"), ChapterItemId = new Guid("75468cd0-478b-45e9-8a8e-51b0e574fb3b"), HelpText = "Krav: Skilt skal plasseres over betalingsterminalen.<br /><br />Det skal være et skilt som er synlig på avstand utenfor kundens betjeningsområde. Formålet er at brukeren kan finne fram til betalingsterminalen.<br /><br />Skiltet skal være plassert over området der kunden skal betale varene sine. Det kan for eksempel være over kassen eller disken der betalingsterminalen er plassert.<br /><br />Eksempler på tekst på skilt er<br />- Kasse<br />- Betal her<br />- Kort og kontant<br />- Nummer på kasse<br />", Order = 1, RequirementItemId = new Guid("aebd662d-9dd5-4a27-88d5-19d6c5e12e5a"), StandardItemId = new Guid("7851b33f-4cec-405c-8533-53cf7a6832e2"), ToolsNeed = "Ingen" },
                        new { Id = new Guid("5b3af04b-f6c6-4425-a22f-c2e7479839a5"), ChapterItemId = new Guid("6c0f12f8-0a91-4849-b18f-2af735017fcd"), Order = 1, RequirementItemId = new Guid("e503322b-ed77-4b69-adc4-eca19b6eb97d"), StandardItemId = new Guid("7851b33f-4cec-405c-8533-53cf7a6832e2"), ToolsNeed = "Ingen" }
                    );
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.Standard.ChapterItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChapterHeading");

                    b.Property<string>("ChapterNumber");

                    b.Property<Guid>("StandardItemId");

                    b.HasKey("Id");

                    b.HasIndex("StandardItemId");

                    b.ToTable("ChapterList");

                    b.HasData(
                        new { Id = new Guid("731a0f5c-f586-471f-b32c-ceb8027f735a"), ChapterHeading = "User operating space", ChapterNumber = "D.6.2", StandardItemId = new Guid("7851b33f-4cec-405c-8533-53cf7a6832e2") },
                        new { Id = new Guid("b80b9b15-8f0e-4702-b7d9-95cafa68f9fb"), ChapterHeading = "Overhead obstructions", ChapterNumber = "D.5.5", StandardItemId = new Guid("7851b33f-4cec-405c-8533-53cf7a6832e2") },
                        new { Id = new Guid("5f5abe28-1a74-4242-acc8-4b881ee4973a"), ChapterHeading = "Access from user operating area", ChapterNumber = "D.6.6", StandardItemId = new Guid("7851b33f-4cec-405c-8533-53cf7a6832e2") },
                        new { Id = new Guid("75468cd0-478b-45e9-8a8e-51b0e574fb3b"), ChapterHeading = "Location signs and visual indications", ChapterNumber = "5.2", StandardItemId = new Guid("7851b33f-4cec-405c-8533-53cf7a6832e2") },
                        new { Id = new Guid("6c0f12f8-0a91-4849-b18f-2af735017fcd"), ChapterHeading = "Layout of operating features", ChapterNumber = "6.3.1", StandardItemId = new Guid("7851b33f-4cec-405c-8533-53cf7a6832e2") }
                    );
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.Standard.StandardItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Standard");

                    b.HasKey("Id");

                    b.ToTable("StandardList");

                    b.HasData(
                        new { Id = new Guid("7851b33f-4cec-405c-8533-53cf7a6832e2"), Name = "Identification Card Systems - Guidance on design for accessible card-activated devices", Standard = "CEN/TS 15291:2006" }
                    );
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.TestGroupItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TestGroupList");

                    b.HasData(
                        new { Id = new Guid("aec1869a-30f8-403c-b909-df115173f009"), Name = "Kundens betjeningsområde" },
                        new { Id = new Guid("b6c22ac9-d775-4dfd-ac8e-b4ca565ea3fb"), Name = "Skilt" },
                        new { Id = new Guid("9aae6bc9-4b60-405c-81a7-ec142d8c1ca6"), Name = "Betjeningshøyde" }
                    );
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.ImageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path");

                    b.HasKey("Id");

                    b.ToTable("ImageList");
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.LogItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CallParameter1");

                    b.Property<string>("CallParameter2");

                    b.Property<string>("Class");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Function");

                    b.Property<string>("ResultException");

                    b.Property<Guid>("ResultId");

                    b.Property<string>("ResultString");

                    b.Property<bool>("ResultSucceeded");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("LogList");
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.User.RoleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsAdminRole");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("RoleList");

                    b.HasData(
                        new { Id = new Guid("e7a78cdc-49f9-4e6c-8abd-afcfc08ca5eb"), IsAdminRole = true, Name = "Admin" },
                        new { Id = new Guid("9e184394-81bb-45cf-a157-dba79a3286d7"), IsAdminRole = true, Name = "Saksbehandlare" },
                        new { Id = new Guid("5ae2ea91-e0a2-48e7-a77b-c1ede6b973e1"), IsAdminRole = false, Name = "Virksomhet" }
                    );
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.User.UserCompany", b =>
                {
                    b.Property<Guid>("UserItemId");

                    b.Property<Guid>("CompanyItemId");

                    b.HasKey("UserItemId", "CompanyItemId");

                    b.HasIndex("CompanyItemId");

                    b.ToTable("UserCompanyList");
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.User.UserItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryCode");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Email");

                    b.Property<DateTime>("LastOnline");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone");

                    b.Property<string>("SocialSecurityNumber")
                        .IsRequired();

                    b.Property<string>("Title");

                    b.Property<string>("Token");

                    b.HasKey("Id");

                    b.ToTable("UserList");

                    b.HasData(
                        new { Id = new Guid("27e6f983-d5c8-4a18-a7f9-977c410e17f0"), CountryCode = "0047", Created = new DateTime(2011, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified), Email = "martin@difi.no", LastOnline = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Martin Swartling", Phone = "912345678", SocialSecurityNumber = "12089400420", Title = "Avdelingssjef", Token = "fqgADdXVzSgBdjIGl1KloQWjN-qGPN66S1h8EiBtg3g=" },
                        new { Id = new Guid("3812f52e-55a0-48d0-9a9c-54147c2fe90c"), CountryCode = "0047", Created = new DateTime(2011, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified), Email = "thea@difi.no", LastOnline = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Thea Sneve", Phone = "712345678", SocialSecurityNumber = "12089400269", Title = "Handläggare", Token = "72og6NuGTB95NqnWN4Mj2IF_pVgodGv_qZ1F8c8u77c=" }
                    );
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.User.UserRole", b =>
                {
                    b.Property<Guid>("UserItemId");

                    b.Property<Guid>("RoleItemId");

                    b.HasKey("UserItemId", "RoleItemId");

                    b.HasIndex("RoleItemId");

                    b.ToTable("UserRoleList");

                    b.HasData(
                        new { UserItemId = new Guid("27e6f983-d5c8-4a18-a7f9-977c410e17f0"), RoleItemId = new Guid("e7a78cdc-49f9-4e6c-8abd-afcfc08ca5eb") },
                        new { UserItemId = new Guid("27e6f983-d5c8-4a18-a7f9-977c410e17f0"), RoleItemId = new Guid("9e184394-81bb-45cf-a157-dba79a3286d7") },
                        new { UserItemId = new Guid("3812f52e-55a0-48d0-9a9c-54147c2fe90c"), RoleItemId = new Guid("9e184394-81bb-45cf-a157-dba79a3286d7") }
                    );
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.ValueList.ValueListFinishedStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("VlFinishedStatusList");

                    b.HasData(
                        new { Id = 1, Text = "Inget" },
                        new { Id = 2, Text = "Avvik" },
                        new { Id = 3, Text = "Merknad" }
                    );
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.ValueList.ValueListTypeOfAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("VlTypeOfAnswer");

                    b.HasData(
                        new { Id = 1, Text = "string" },
                        new { Id = 2, Text = "bool" },
                        new { Id = 3, Text = "int" },
                        new { Id = 4, Text = "image" }
                    );
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.ValueList.ValueListTypeOfMachine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("VlTypeOfMachineList");

                    b.HasData(
                        new { Id = 1, Text = "Betalingsterminal" },
                        new { Id = 2, Text = "Billettautomat" },
                        new { Id = 3, Text = "Selvbetjent kasse" },
                        new { Id = 4, Text = "Minibank" },
                        new { Id = 5, Text = "Vareautomat" }
                    );
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.ValueList.ValueListTypeOfResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("VlTypeOfResult");

                    b.HasData(
                        new { Id = 1, Text = "Samsvar" },
                        new { Id = 2, Text = "Brudd" },
                        new { Id = 3, Text = "Ikke-forekomst" },
                        new { Id = 4, Text = "Ikke testbar" },
                        new { Id = 5, Text = "Ikke testa" }
                    );
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.ValueList.ValueListTypeOfSupplierAndVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("VlTypeOfSupplierAndVersionList");

                    b.HasData(
                        new { Id = 1, Text = "Vet ikke" },
                        new { Id = 2, Text = "Ingenico iCT250" },
                        new { Id = 3, Text = "Ingenico iCT250E" },
                        new { Id = 4, Text = "Ingenico iCT250r" },
                        new { Id = 5, Text = "Ingenico iPP350" },
                        new { Id = 6, Text = "Ingenico iSelf" },
                        new { Id = 7, Text = "Ingenico iSMP" },
                        new { Id = 8, Text = "Ingenico isMP4" },
                        new { Id = 9, Text = "Ingenico iUP" },
                        new { Id = 10, Text = "Ingenico iWL250" },
                        new { Id = 11, Text = "Ingenico iWL250B " },
                        new { Id = 12, Text = "Ingenico iWL250G" },
                        new { Id = 13, Text = "Ingenico iWL251" },
                        new { Id = 14, Text = "Ingenico iWL252" },
                        new { Id = 15, Text = "iZettle Reader" },
                        new { Id = 16, Text = "SumUp Air" },
                        new { Id = 17, Text = "Verifone VX 520 C" },
                        new { Id = 18, Text = "Verifone VX 680" },
                        new { Id = 19, Text = "Verifone VX 690" },
                        new { Id = 20, Text = "Verifone VX 820" },
                        new { Id = 21, Text = "Verifone VX 820 Duet" },
                        new { Id = 22, Text = "Verifone Xenteo ECO" },
                        new { Id = 23, Text = "Verifone Yomani XR" }
                    );
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.ValueList.ValueListTypeOfTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("VlTypeOfTestList");

                    b.HasData(
                        new { Id = 1, Text = "Automat" },
                        new { Id = 2, Text = "Webside" },
                        new { Id = 3, Text = "Applikasjon" }
                    );
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.ValueList.ValueListUserPrerequisite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("VlUserPrerequisiteList");

                    b.HasData(
                        new { Id = 1, Text = "Blinde" },
                        new { Id = 2, Text = "Svaksynte" },
                        new { Id = 3, Text = "Fargeblinde" },
                        new { Id = 4, Text = "Døvblinde" },
                        new { Id = 5, Text = "Døve" },
                        new { Id = 6, Text = "Nedsett høyrsel/tunghøyrde" },
                        new { Id = 7, Text = "Nedsett kognisjon" },
                        new { Id = 8, Text = "Nedsett motorikk" },
                        new { Id = 9, Text = "Fotosensitivitet/anfall" },
                        new { Id = 10, Text = "Fysisk størrelse" },
                        new { Id = 11, Text = "Redusert taktil sensibilitet" }
                    );
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Company.ContactPersonItem", b =>
                {
                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Company.CompanyItem")
                        .WithMany("ContactPersonList")
                        .HasForeignKey("CompanyItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Data.AnswerData", b =>
                {
                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.AnswerItem", "AnswerItem")
                        .WithMany("AnswerDataList")
                        .HasForeignKey("AnswerItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.ImageItem", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.ValueList.ValueListTypeOfResult", "Result")
                        .WithMany("AnswerDataList")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Data.RuleData")
                        .WithMany("AnswerDataList")
                        .HasForeignKey("RuleDataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.ValueList.ValueListTypeOfAnswer", "TypeOfAnswer")
                        .WithMany()
                        .HasForeignKey("TypeOfAnswerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Data.OutcomeData", b =>
                {
                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Declaration.DeclarationTestItem")
                        .WithMany("OutcomeDataList")
                        .HasForeignKey("DeclarationTestItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.IndicatorItem", "Indicator")
                        .WithMany("OutcomeDataList")
                        .HasForeignKey("IndicatorItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.RequirementItem", "Requirement")
                        .WithMany()
                        .HasForeignKey("RequirementItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.ValueList.ValueListTypeOfResult", "Result")
                        .WithMany("OutcomeDataList")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Data.RuleData", b =>
                {
                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Data.OutcomeData", "OutcomeData")
                        .WithMany("RuleDataList")
                        .HasForeignKey("OutcomeDataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.ValueList.ValueListTypeOfResult", "Result")
                        .WithMany("RuleDataList")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.RuleItem", "Rule")
                        .WithMany("RuleDataList")
                        .HasForeignKey("RuleItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.DeclarationItem", b =>
                {
                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Company.CompanyItem", "Company")
                        .WithMany("DeclarationList")
                        .HasForeignKey("CompanyItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.User.UserItem", "User")
                        .WithMany()
                        .HasForeignKey("UserItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.DeclarationTestItem", b =>
                {
                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Declaration.DeclarationItem", "DeclarationItem")
                        .WithOne("DeclarationTestItem")
                        .HasForeignKey("Difi.Sjalvdeklaration.Shared.Classes.Declaration.DeclarationTestItem", "DeclarationItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.ValueList.ValueListFinishedStatus", "FinishedStatus")
                        .WithMany()
                        .HasForeignKey("FinishedStatusId");

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.ImageItem", "Image1")
                        .WithMany()
                        .HasForeignKey("Image1Id");

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.ImageItem", "Image2")
                        .WithMany()
                        .HasForeignKey("Image2Id");

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.ValueList.ValueListTypeOfSupplierAndVersion", "SupplierAndVersion")
                        .WithMany()
                        .HasForeignKey("SupplierAndVersionId");

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.ValueList.ValueListTypeOfMachine", "TypeOfMachine")
                        .WithMany()
                        .HasForeignKey("TypeOfMachineId");

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.ValueList.ValueListTypeOfTest", "TypeOfTest")
                        .WithMany()
                        .HasForeignKey("TypeOfTestId");
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.AnswerItem", b =>
                {
                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.RuleItem", "RuleItem")
                        .WithMany("AnswerList")
                        .HasForeignKey("RuleItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.ValueList.ValueListTypeOfAnswer", "TypeOfAnswer")
                        .WithMany()
                        .HasForeignKey("TypeOfAnswerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.DeclarationTestGroup", b =>
                {
                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Declaration.DeclarationItem", "DeclarationItem")
                        .WithMany("TestGroupList")
                        .HasForeignKey("DeclarationItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.TestGroupItem", "TestGroupItem")
                        .WithMany("DeclarationList")
                        .HasForeignKey("TestGroupItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.IndicatorTestGroup", b =>
                {
                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.IndicatorItem", "IndicatorItem")
                        .WithMany("TestGroupList")
                        .HasForeignKey("IndicatorItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.TestGroupItem", "TestGroupItem")
                        .WithMany("IndicatorList")
                        .HasForeignKey("TestGroupItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.IndicatorUserPrerequisite", b =>
                {
                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.IndicatorItem", "IndicatorItem")
                        .WithMany("IndicatorUserPrerequisiteList")
                        .HasForeignKey("IndicatorItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.ValueList.ValueListUserPrerequisite", "ValueListUserPrerequisite")
                        .WithMany()
                        .HasForeignKey("ValueListUserPrerequisiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.RequirementItem", b =>
                {
                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.IndicatorItem", "Indicator")
                        .WithOne("RequirementItem")
                        .HasForeignKey("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.RequirementItem", "IndicatorItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.RequirementUserPrerequisite", b =>
                {
                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.RequirementItem", "RequirementItem")
                        .WithMany("RequirementUserPrerequisiteList")
                        .HasForeignKey("RequirementItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.ValueList.ValueListUserPrerequisite", "ValueListUserPrerequisite")
                        .WithMany()
                        .HasForeignKey("ValueListUserPrerequisiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.RuleItem", b =>
                {
                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.Standard.ChapterItem", "Chapter")
                        .WithMany("RuleList")
                        .HasForeignKey("ChapterItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.IndicatorItem")
                        .WithMany("RuleList")
                        .HasForeignKey("IndicatorItemId");

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.RequirementItem", "Requirement")
                        .WithMany("RuleList")
                        .HasForeignKey("RequirementItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.Standard.StandardItem", "Standard")
                        .WithMany("RuleList")
                        .HasForeignKey("StandardItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.Standard.ChapterItem", b =>
                {
                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Declaration.Rules.Standard.StandardItem", "Standard")
                        .WithMany()
                        .HasForeignKey("StandardItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.User.UserCompany", b =>
                {
                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.Company.CompanyItem", "CompanyItem")
                        .WithMany("UserList")
                        .HasForeignKey("CompanyItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.User.UserItem", "UserItem")
                        .WithMany("CompanyList")
                        .HasForeignKey("UserItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Difi.Sjalvdeklaration.Shared.Classes.User.UserRole", b =>
                {
                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.User.RoleItem", "RoleItem")
                        .WithMany("UserList")
                        .HasForeignKey("RoleItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Difi.Sjalvdeklaration.Shared.Classes.User.UserItem", "UserItem")
                        .WithMany("RoleList")
                        .HasForeignKey("UserItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
