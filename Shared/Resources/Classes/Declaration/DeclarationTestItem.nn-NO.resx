<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="metadata">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" />
							</xsd:sequence>
							<xsd:attribute name="name" use="required" type="xsd:string" />
							<xsd:attribute name="type" type="xsd:string" />
							<xsd:attribute name="mimetype" type="xsd:string" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="assembly">
						<xsd:complexType>
							<xsd:attribute name="alias" type="xsd:string" />
							<xsd:attribute name="name" type="xsd:string" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="Choose from the list which manufacturer and model payment terminal you should check" xml:space="preserve">
    <value>Vel frå lista kva produsent og modell betalingsterminal du skal kontrollere.</value>
  </data>
	<data name="Describe which payment terminal you choose to control" xml:space="preserve">
    <value>Beskriv kva for ein betalingsterminal du vel å kontrollere.</value>
  </data>
	<data name="Deviation or Notice" xml:space="preserve">
    <value>Avvik eller merknader</value>
  </data>
	<data name="Difi needs to know which payment terminal you check and submit information about." xml:space="preserve">
    <value>Difi treng å vite kva slags betalingsterminal du kontrollerer og sender inn opplysningar om.</value>
  </data>
	<data name="Has a machine" xml:space="preserve">
    <value>Har ein automat</value>
  </data>
	<data name="Here you can, for example, type where the payment terminal is located. &lt;br /&gt; Examples are cash register 1, closest to the the entrance / exit, to the left of the the entrance / exit." xml:space="preserve">
    <value>Her kan du for eksempel skrive kvar betalingsterminalen er plassert. &lt;br/&gt;
Eksempel er kasse 1, nærmast inngangen/utgangen, den til venstre for inngangen/utgangen.</value>
  </data>
	<data name="Manufacturer and name of automat" xml:space="preserve">
    <value>Skriv inn produsentnamn og modellnummer/modellnamn på betalingsterminalen</value>
  </data>
	<data name="Purpose of test" xml:space="preserve">
    <value>Formål med testen</value>
  </data>
	<data name="Take a close-up of the payment terminal you are going to register information about" xml:space="preserve">
    <value>Ta eit nærbilde av betalingsterminalen du skal registrere opplysningar om.</value>
  </data>
	<data name="Take a survey of the payment terminal to register information about. The image will show where the payment terminal is located" xml:space="preserve">
    <value>Ta eit oversiktsbilde av betalingsterminalen du skal registrere opplysningar om.</value>
  </data>
	<data name="The image should show where the payment terminal is located. The image should show the entire payment terminal and the area in front of the terminal." xml:space="preserve">
    <value>Bildet skal vise kvar betalingsterminalen er plassert. Bildet skal vise heile betalingsterminalen og området framføre terminalen.</value>
  </data>
	<data name="Type of machine" xml:space="preserve">
    <value>Type automat</value>
  </data>
	<data name="Type of test" xml:space="preserve">
    <value>Type ikt-løysing</value>
  </data>
</root>